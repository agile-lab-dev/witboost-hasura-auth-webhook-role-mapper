# generated by fastapi-codegen:
#   filename:  openapi-specification.yml
#   timestamp: 2023-06-08T08:32:00+00:00

from __future__ import annotations

import logging
from functools import lru_cache
from typing import Annotated, Union

from fastapi import Depends, FastAPI, Response, status

from src.handlers.webhook_handler import (
    WebhookHandler,
    WebhookHandlerUnauthorizedException,
)
from src.jwt.azure_claims_service import AzureClaimsService
from src.jwt.azure_membership_service import AzureConfig, AzureMembershipService
from src.jwt.claims_service import ClaimsService
from src.jwt.concrete_jwt_service import ConcreteJWTService, JWTConfig
from src.jwt.jwt_service import JWTService
from src.jwt.membership_service import MembershipService
from src.utils import setup_logging

from .models import (
    AuthenticationRequest,
    AuthenticationResponse,
    GroupRoleMappings,
    Role,
    SystemError,
    UserRoleMappings,
    ValidationError,
)

setup_logging()
logger = logging.getLogger(__name__)

app = FastAPI(
    title="Hasura Authentication Webhook & Role Mapping Microservice",
    description="Microservice responsible for Hasura webhook-based authentication and role mapping.",  # noqa: E501
    version="{{version}}",
    servers=[{"url": "/datamesh.specificprovisioner"}],
)


@lru_cache()
def get_webhook_handler() -> WebhookHandler:
    jwt_config = JWTConfig()
    azure_config = AzureConfig()
    jwt_service: JWTService = ConcreteJWTService(jwt_config)
    membership_service: MembershipService = AzureMembershipService(azure_config)
    claims_service: ClaimsService = AzureClaimsService(membership_service)
    return WebhookHandler(claims_service=claims_service, jwt_service=jwt_service)


@app.post(
    "/v1/authenticate",
    responses={
        "200": {"model": AuthenticationResponse},
        "400": {"model": ValidationError},
        "401": {"model": str},
        "500": {"model": SystemError},
    },
    tags=["AuthenticationWebhook"],
)
async def authenticate_request(
    body: AuthenticationRequest,
    response: Response,
    webhook_handler: Annotated[WebhookHandler, Depends(get_webhook_handler)],
) -> Union[AuthenticationResponse, ValidationError, str, SystemError]:
    """
    Authentication request sent by Hasura about a client
    """
    try:
        res = await webhook_handler.authenticate_request(body)
        return res
    except WebhookHandlerUnauthorizedException:
        response.status_code = status.HTTP_401_UNAUTHORIZED
        return "Unauthorized"
    except Exception:
        logger.exception("Exception in /v1/authenticate")
        response.status_code = status.HTTP_500_INTERNAL_SERVER_ERROR
        return SystemError(error="System error")


@app.put(
    "/v1/group_roles",
    response_model=GroupRoleMappings,
    responses={"400": {"model": ValidationError}, "500": {"model": SystemError}},
    tags=["RoleMapper"],
)
def upsert_group_roles(
    body: GroupRoleMappings,
) -> Union[GroupRoleMappings, ValidationError, SystemError]:
    """
    Upsert role mappings for groups; adds mappings for all groups listed but not already present, removes already present mappings for all unlisted groups
    """  # noqa: E501
    return SystemError(error="error")


@app.get("/v1/health", response_model=str, tags=["Health"])
def get_v1_health() -> str:
    """
    Health endpoint
    """
    return "Alive"


@app.put(
    "/v1/roles",
    response_model=Role,
    responses={"400": {"model": ValidationError}, "500": {"model": SystemError}},
    tags=["RoleMapper"],
)
def upsert_role(body: Role) -> Union[Role, ValidationError, SystemError]:
    """
    Upsert a role for a given component id and GraphQL root field
    """
    return SystemError(error="error")


@app.get(
    "/v1/roles/component_id/{component_id}",
    response_model=Role,
    responses={"400": {"model": ValidationError}, "500": {"model": SystemError}},
    tags=["RoleMapper"],
)
def get_role_by_component_id(
    component_id: str,
) -> Union[Role, ValidationError, SystemError]:
    """
    Get role by component id
    """
    return SystemError(error="error")


@app.get(
    "/v1/roles/graphql_root_field_name/{graphql_root_field_name}",
    response_model=Role,
    responses={"400": {"model": ValidationError}, "500": {"model": SystemError}},
    tags=["RoleMapper"],
)
def get_role_by_graphql_root_field_name(
    graphql_root_field_name: str,
) -> Union[Role, ValidationError, SystemError]:
    """
    Get role by GraphQL root field name
    """
    return SystemError(error="error")


@app.get(
    "/v1/roles/{role_id}",
    response_model=Role,
    responses={"400": {"model": ValidationError}, "500": {"model": SystemError}},
    tags=["RoleMapper"],
)
def get_role_by_id(role_id: str) -> Union[Role, ValidationError, SystemError]:
    """
    Get role by id
    """
    return SystemError(error="error")


@app.put(
    "/v1/user_roles",
    response_model=UserRoleMappings,
    responses={"400": {"model": ValidationError}, "500": {"model": SystemError}},
    tags=["RoleMapper"],
)
def upsert_user_roles(
    body: UserRoleMappings,
) -> Union[UserRoleMappings, ValidationError, SystemError]:
    """
    Upsert role mappings for users; adds mappings for all users listed but not already present, removes already present mappings for all unlisted users
    """  # noqa: E501
    return SystemError(error="error")
