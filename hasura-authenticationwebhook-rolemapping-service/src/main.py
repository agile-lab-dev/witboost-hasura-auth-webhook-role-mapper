# generated by fastapi-codegen:
#   filename:  openapi-specification.yml
#   timestamp: 2023-06-08T08:32:00+00:00

from __future__ import annotations

from typing import Union

from fastapi import FastAPI

from .models import (
    AuthenticationRequest,
    AuthenticationResponse,
    GroupRoleMappings,
    Role,
    SystemError,
    UserRoleMappings,
    ValidationError,
)

app = FastAPI(
    title="Hasura Authentication Webhook & Role Mapping Microservice",
    description="Microservice responsible for Hasura webhook-based authentication and role mapping.",  # noqa: E501
    version="{{version}}",
    servers=[{"url": "/datamesh.specificprovisioner"}],
)


@app.post(
    "/v1/authenticate",
    response_model=AuthenticationResponse,
    responses={"400": {"model": ValidationError}, "500": {"model": SystemError}},
    tags=["AuthenticationWebhook"],
)
def authenticate_request(
    body: AuthenticationRequest,
) -> Union[AuthenticationResponse, ValidationError, SystemError]:
    """
    Authentication request sent by Hasura about a client
    """
    return SystemError(error="error")


@app.put(
    "/v1/group_roles",
    response_model=GroupRoleMappings,
    responses={"400": {"model": ValidationError}, "500": {"model": SystemError}},
    tags=["RoleMapper"],
)
def upsert_group_roles(
    body: GroupRoleMappings,
) -> Union[GroupRoleMappings, ValidationError, SystemError]:
    """
    Upsert role mappings for groups; adds mappings for all groups listed but not already present, removes already present mappings for all unlisted groups
    """  # noqa: E501
    return SystemError(error="error")


@app.get("/v1/health", response_model=str, tags=["Health"])
def get_v1_health() -> str:
    """
    Health endpoint
    """
    return "Alive"


@app.put(
    "/v1/roles",
    response_model=Role,
    responses={"400": {"model": ValidationError}, "500": {"model": SystemError}},
    tags=["RoleMapper"],
)
def upsert_role(body: Role) -> Union[Role, ValidationError, SystemError]:
    """
    Upsert a role for a given component id and GraphQL root field
    """
    return SystemError(error="error")


@app.get(
    "/v1/roles/component_id/{component_id}",
    response_model=Role,
    responses={"400": {"model": ValidationError}, "500": {"model": SystemError}},
    tags=["RoleMapper"],
)
def get_role_by_component_id(
    component_id: str,
) -> Union[Role, ValidationError, SystemError]:
    """
    Get role by component id
    """
    return SystemError(error="error")


@app.get(
    "/v1/roles/graphql_root_field_name/{graphql_root_field_name}",
    response_model=Role,
    responses={"400": {"model": ValidationError}, "500": {"model": SystemError}},
    tags=["RoleMapper"],
)
def get_role_by_graphql_root_field_name(
    graphql_root_field_name: str,
) -> Union[Role, ValidationError, SystemError]:
    """
    Get role by GraphQL root field name
    """
    return SystemError(error="error")


@app.get(
    "/v1/roles/{role_id}",
    response_model=Role,
    responses={"400": {"model": ValidationError}, "500": {"model": SystemError}},
    tags=["RoleMapper"],
)
def get_role_by_id(role_id: str) -> Union[Role, ValidationError, SystemError]:
    """
    Get role by id
    """
    return SystemError(error="error")


@app.put(
    "/v1/user_roles",
    response_model=UserRoleMappings,
    responses={"400": {"model": ValidationError}, "500": {"model": SystemError}},
    tags=["RoleMapper"],
)
def upsert_user_roles(
    body: UserRoleMappings,
) -> Union[UserRoleMappings, ValidationError, SystemError]:
    """
    Upsert role mappings for users; adds mappings for all users listed but not already present, removes already present mappings for all unlisted users
    """  # noqa: E501
    return SystemError(error="error")
